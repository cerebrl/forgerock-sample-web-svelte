import { SvelteComponent, init, safe_not_equal, empty, insert, noop, detach, svg_element, attr, append } from 'svelte/internal';

/* src/lib/components/icons/todo-icon.svelte generated by Svelte v3.47.0 */

function create_else_block(ctx) {
	let svg;
	let path0;
	let path1;
	let svg_class_value;

	return {
		c() {
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			attr(path0, "d", "M0 0h24v24H0z");
			attr(path0, "fill", "none");
			attr(path1, "d", "M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z");
			attr(svg, "class", svg_class_value = `cstm_todo-icon_incomplete ${/*classes*/ ctx[0]}`);
			attr(svg, "height", /*size*/ ctx[2]);
			attr(svg, "width", /*size*/ ctx[2]);
			attr(svg, "viewBox", "0 0 24 24");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path0);
			append(svg, path1);
		},
		p(ctx, dirty) {
			if (dirty & /*classes*/ 1 && svg_class_value !== (svg_class_value = `cstm_todo-icon_incomplete ${/*classes*/ ctx[0]}`)) {
				attr(svg, "class", svg_class_value);
			}

			if (dirty & /*size*/ 4) {
				attr(svg, "height", /*size*/ ctx[2]);
			}

			if (dirty & /*size*/ 4) {
				attr(svg, "width", /*size*/ ctx[2]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (6:0) {#if completed}
function create_if_block(ctx) {
	let svg;
	let rect;
	let path;
	let svg_class_value;

	return {
		c() {
			svg = svg_element("svg");
			rect = svg_element("rect");
			path = svg_element("path");
			attr(rect, "fill", "none");
			attr(rect, "height", "24");
			attr(rect, "width", "24");
			attr(path, "d", "M22,5.18L10.59,16.6l-4.24-4.24l1.41-1.41l2.83,2.83l10-10L22,5.18z M19.79,10.22C19.92,10.79,20,11.39,20,12 c0,4.42-3.58,8-8,8s-8-3.58-8-8c0-4.42,3.58-8,8-8c1.58,0,3.04,0.46,4.28,1.25l1.44-1.44C16.1,2.67,14.13,2,12,2C6.48,2,2,6.48,2,12 c0,5.52,4.48,10,10,10s10-4.48,10-10c0-1.19-0.22-2.33-0.6-3.39L19.79,10.22z");
			attr(svg, "class", svg_class_value = `cstm_todo-icon_complete ${/*classes*/ ctx[0]}`);
			attr(svg, "height", /*size*/ ctx[2]);
			attr(svg, "width", /*size*/ ctx[2]);
			attr(svg, "viewBox", "0 0 24 24");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, rect);
			append(svg, path);
		},
		p(ctx, dirty) {
			if (dirty & /*classes*/ 1 && svg_class_value !== (svg_class_value = `cstm_todo-icon_complete ${/*classes*/ ctx[0]}`)) {
				attr(svg, "class", svg_class_value);
			}

			if (dirty & /*size*/ 4) {
				attr(svg, "height", /*size*/ ctx[2]);
			}

			if (dirty & /*size*/ 4) {
				attr(svg, "width", /*size*/ ctx[2]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

function create_fragment(ctx) {
	let if_block_anchor;

	function select_block_type(ctx, dirty) {
		if (/*completed*/ ctx[1]) return create_if_block;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, [dirty]) {
			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { classes = '' } = $$props;
	let { completed = false } = $$props;
	let { size = '24px' } = $$props;

	$$self.$$set = $$props => {
		if ('classes' in $$props) $$invalidate(0, classes = $$props.classes);
		if ('completed' in $$props) $$invalidate(1, completed = $$props.completed);
		if ('size' in $$props) $$invalidate(2, size = $$props.size);
	};

	return [classes, completed, size];
}

class Todo_icon extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { classes: 0, completed: 1, size: 2 });
	}
}

export { Todo_icon as default };
