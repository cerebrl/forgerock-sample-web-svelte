import { SvelteComponent, init, safe_not_equal, element, space, attr, insert, append, listen, prevent_default, noop, detach, component_subscribe, text } from 'svelte/internal';
import { theme } from '../../global-state.js';
import apiRequest from '../../utilities/request.js';

/* src/lib/components/todos/create.svelte generated by Svelte v3.47.0 */

function create_else_block(ctx) {
	let t;

	return {
		c() {
			t = text("Create");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (31:4) {#if creatingTodo}
function create_if_block(ctx) {
	let span;

	return {
		c() {
			span = element("span");
			attr(span, "class", "spinner-border spinner-border-sm");
			attr(span, "role", "status");
			attr(span, "aria-hidden", "true");
		},
		m(target, anchor) {
			insert(target, span, anchor);
		},
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

function create_fragment(ctx) {
	let form;
	let div;
	let input;
	let input_class_value;
	let t0;
	let label;
	let t2;
	let button;
	let form_class_value;
	let mounted;
	let dispose;

	function select_block_type(ctx, dirty) {
		if (/*creatingTodo*/ ctx[0]) return create_if_block;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);

	return {
		c() {
			form = element("form");
			div = element("div");
			input = element("input");
			t0 = space();
			label = element("label");
			label.textContent = "What needs doing?";
			t2 = space();
			button = element("button");
			if_block.c();
			attr(input, "id", "newTodo");
			attr(input, "type", "text");
			attr(input, "class", input_class_value = `cstm_form-control form-control bg-transparent ${/*$theme*/ ctx[1].textClass} ${/*$theme*/ ctx[1].borderClass}`);
			attr(input, "placeholder", "What needs doing?");
			input.required = true;
			attr(label, "for", "newTodo");
			attr(div, "class", "cstm_todos-input cstm_form-floating form-floating flex-grow-1");
			attr(button, "class", "btn btn-primary ms-2");
			attr(button, "type", "submit");
			attr(form, "class", form_class_value = `p-3 d-flex ${/*$theme*/ ctx[1].textClass}`);
			attr(form, "action", "https://api.example.com:8443/todos");
			attr(form, "method", "POST");
		},
		m(target, anchor) {
			insert(target, form, anchor);
			append(form, div);
			append(div, input);
			append(div, t0);
			append(div, label);
			append(form, t2);
			append(form, button);
			if_block.m(button, null);

			if (!mounted) {
				dispose = listen(form, "submit", prevent_default(/*createTodo*/ ctx[2]));
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*$theme*/ 2 && input_class_value !== (input_class_value = `cstm_form-control form-control bg-transparent ${/*$theme*/ ctx[1].textClass} ${/*$theme*/ ctx[1].borderClass}`)) {
				attr(input, "class", input_class_value);
			}

			if (current_block_type !== (current_block_type = select_block_type(ctx))) {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(button, null);
				}
			}

			if (dirty & /*$theme*/ 2 && form_class_value !== (form_class_value = `p-3 d-flex ${/*$theme*/ ctx[1].textClass}`)) {
				attr(form, "class", form_class_value);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(form);
			if_block.d();
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $theme;
	component_subscribe($$self, theme, $$value => $$invalidate(1, $theme = $$value));
	let { addTodo } = $$props;
	let creatingTodo = false;

	async function createTodo(event) {
		$$invalidate(0, creatingTodo = true);
		const title = event.target.elements[0].value;
		const newTodo = await apiRequest('todos', 'POST', { title });
		addTodo(newTodo);
		$$invalidate(0, creatingTodo = false);
	}

	$$self.$$set = $$props => {
		if ('addTodo' in $$props) $$invalidate(3, addTodo = $$props.addTodo);
	};

	return [creatingTodo, $theme, createTodo, addTodo];
}

class Create extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { addTodo: 3 });
	}
}

export { Create as default };
