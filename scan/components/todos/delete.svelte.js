import { SvelteComponent, init, safe_not_equal, element, space, attr, insert, append, listen, is_function, noop, detach, component_subscribe } from 'svelte/internal';
import { theme } from '../../global-state.js';

/* src/lib/components/todos/delete.svelte generated by Svelte v3.47.0 */

function create_fragment(ctx) {
	let div4;
	let div3;
	let div2;
	let div0;
	let t1;
	let div1;
	let button0;
	let t3;
	let button1;
	let div1_class_value;
	let div2_class_value;
	let mounted;
	let dispose;

	return {
		c() {
			div4 = element("div");
			div3 = element("div");
			div2 = element("div");
			div0 = element("div");
			div0.innerHTML = `<p>Are you sure you want to delete this todo?</p>`;
			t1 = space();
			div1 = element("div");
			button0 = element("button");
			button0.textContent = "Close";
			t3 = space();
			button1 = element("button");
			button1.textContent = "Delete Todo";
			attr(div0, "class", "modal-body pt-4 px-4");
			attr(button0, "type", "button");
			attr(button0, "data-bs-toggle", "modal");
			attr(button0, "data-bs-target", "#deleteModal");
			attr(button0, "class", "btn btn-secondary");
			attr(button1, "type", "button");
			attr(button1, "data-bs-toggle", "modal");
			attr(button1, "data-bs-target", "#deleteModal");
			attr(button1, "class", "btn btn-danger");
			attr(div1, "class", div1_class_value = `modal-footer p-3 ${/*$theme*/ ctx[1].borderClass}`);
			attr(div2, "class", div2_class_value = `modal-content  ${/*$theme*/ ctx[1].cardBgClass} ${/*$theme*/ ctx[1].textClass} ${/*$theme*/ ctx[1].borderClass}`);
			attr(div3, "class", `modal-dialog`);
			attr(div4, "class", `modal fade`);
			attr(div4, "data-bs-backdrop", "static");
			attr(div4, "id", "deleteModal");
			attr(div4, "tabindex", "-1");
			attr(div4, "aria-modal", "true");
			attr(div4, "role", "dialog");
		},
		m(target, anchor) {
			insert(target, div4, anchor);
			append(div4, div3);
			append(div3, div2);
			append(div2, div0);
			append(div2, t1);
			append(div2, div1);
			append(div1, button0);
			append(div1, t3);
			append(div1, button1);

			if (!mounted) {
				dispose = listen(button1, "click", function () {
					if (is_function(/*deleteTodo*/ ctx[0])) /*deleteTodo*/ ctx[0].apply(this, arguments);
				});

				mounted = true;
			}
		},
		p(new_ctx, [dirty]) {
			ctx = new_ctx;

			if (dirty & /*$theme*/ 2 && div1_class_value !== (div1_class_value = `modal-footer p-3 ${/*$theme*/ ctx[1].borderClass}`)) {
				attr(div1, "class", div1_class_value);
			}

			if (dirty & /*$theme*/ 2 && div2_class_value !== (div2_class_value = `modal-content  ${/*$theme*/ ctx[1].cardBgClass} ${/*$theme*/ ctx[1].textClass} ${/*$theme*/ ctx[1].borderClass}`)) {
				attr(div2, "class", div2_class_value);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div4);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $theme;
	component_subscribe($$self, theme, $$value => $$invalidate(1, $theme = $$value));
	let { deleteTodo } = $$props;

	$$self.$$set = $$props => {
		if ('deleteTodo' in $$props) $$invalidate(0, deleteTodo = $$props.deleteTodo);
	};

	return [deleteTodo, $theme];
}

class Delete extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { deleteTodo: 0 });
	}
}

export { Delete as default };
