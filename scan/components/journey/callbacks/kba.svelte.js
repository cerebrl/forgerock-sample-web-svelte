import { SvelteComponent, init, safe_not_equal, element, text, space, insert, append, noop, detach, create_component, attr, mount_component, listen, transition_in, transition_out, destroy_component, destroy_each, run_all, component_subscribe } from 'svelte/internal';
import { theme } from '../../../global-state.js';
import Lock_icon from '../../icons/lock-icon.svelte.js';

/* src/lib/components/journey/callbacks/kba.svelte generated by Svelte v3.47.0 */

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[10] = list[i];
	child_ctx[12] = i;
	return child_ctx;
}

// (64:4) {#each questions as question, idx}
function create_each_block(ctx) {
	let option;
	let t0_value = /*question*/ ctx[10] + "";
	let t0;
	let t1;
	let option_value_value;

	return {
		c() {
			option = element("option");
			t0 = text(t0_value);
			t1 = space();
			option.__value = option_value_value = /*idx*/ ctx[12];
			option.value = option.__value;
		},
		m(target, anchor) {
			insert(target, option, anchor);
			append(option, t0);
			append(option, t1);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(option);
		}
	};
}

function create_fragment(ctx) {
	let hr;
	let hr_class_value;
	let t0;
	let div0;
	let lockicon;
	let div0_class_value;
	let t1;
	let h2;
	let t2;
	let h2_class_value;
	let t3;
	let div1;
	let select;
	let option;
	let select_class_value;
	let t5;
	let label0;
	let t6;
	let t7;
	let div2;
	let input;
	let input_class_value;
	let t8;
	let label1;
	let t9;
	let div2_class_value;
	let current;
	let mounted;
	let dispose;
	lockicon = new Lock_icon({});
	let each_value = /*questions*/ ctx[2];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			hr = element("hr");
			t0 = space();
			div0 = element("div");
			create_component(lockicon.$$.fragment);
			t1 = space();
			h2 = element("h2");
			t2 = text("Provide security question(s) & answer(s) below");
			t3 = space();
			div1 = element("div");
			select = element("select");
			option = element("option");
			option.textContent = "No selection";

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t5 = space();
			label0 = element("label");
			t6 = text(/*prompt*/ ctx[1]);
			t7 = space();
			div2 = element("div");
			input = element("input");
			t8 = space();
			label1 = element("label");
			t9 = text("Security Answer");
			attr(hr, "class", hr_class_value = `cstm_hr d-flex mt-5 ${/*$theme*/ ctx[0].textClass}`);
			attr(div0, "class", div0_class_value = `cstm_hr-lock_${/*$theme*/ ctx[0].mode} d-flex justify-content-center`);
			attr(h2, "class", h2_class_value = `fs-6 mt-5 fw-normal ${/*$theme*/ ctx[0].textClass}`);
			option.__value = "";
			option.value = option.__value;
			attr(select, "class", select_class_value = `cstm_form-select form-select bg-transparent ${/*$theme*/ ctx[0].textClass} ${/*$theme*/ ctx[0].borderClass}`);
			attr(select, "id", /*inputNameQuestion*/ ctx[3]);
			attr(select, "name", /*inputNameQuestion*/ ctx[3]);
			select.required = true;
			attr(label0, "for", /*inputNameQuestion*/ ctx[3]);
			attr(div1, "class", "cstm_form-floating form-floating mb-3");
			attr(input, "class", input_class_value = `cstm_form-control form-control bg-transparent ${/*$theme*/ ctx[0].textClass} ${/*$theme*/ ctx[0].borderClass}`);
			attr(input, "id", /*inputNameAnswer*/ ctx[4] || 'kba-answer-id');
			attr(input, "name", /*inputNameAnswer*/ ctx[4] || 'kba-answer-name');
			attr(input, "placeholder", "Security Answer");
			input.required = true;
			attr(input, "type", "text");
			attr(label1, "for", /*inputNameAnswer*/ ctx[4] || 'ka-answer-label');

			attr(div2, "class", div2_class_value = `cstm_form-floating form-floating pb-5 mb-5 border-bottom pb-3 ${/*$theme*/ ctx[0].mode === 'dark'
			? 'border-white'
			: 'border-secondary'}`);
		},
		m(target, anchor) {
			insert(target, hr, anchor);
			insert(target, t0, anchor);
			insert(target, div0, anchor);
			mount_component(lockicon, div0, null);
			insert(target, t1, anchor);
			insert(target, h2, anchor);
			append(h2, t2);
			insert(target, t3, anchor);
			insert(target, div1, anchor);
			append(div1, select);
			append(select, option);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(select, null);
			}

			append(div1, t5);
			append(div1, label0);
			append(label0, t6);
			insert(target, t7, anchor);
			insert(target, div2, anchor);
			append(div2, input);
			append(div2, t8);
			append(div2, label1);
			append(label1, t9);
			current = true;

			if (!mounted) {
				dispose = [
					listen(select, "change", /*setQuestion*/ ctx[6]),
					listen(input, "change", /*setAnswer*/ ctx[5])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (!current || dirty & /*$theme*/ 1 && hr_class_value !== (hr_class_value = `cstm_hr d-flex mt-5 ${/*$theme*/ ctx[0].textClass}`)) {
				attr(hr, "class", hr_class_value);
			}

			if (!current || dirty & /*$theme*/ 1 && div0_class_value !== (div0_class_value = `cstm_hr-lock_${/*$theme*/ ctx[0].mode} d-flex justify-content-center`)) {
				attr(div0, "class", div0_class_value);
			}

			if (!current || dirty & /*$theme*/ 1 && h2_class_value !== (h2_class_value = `fs-6 mt-5 fw-normal ${/*$theme*/ ctx[0].textClass}`)) {
				attr(h2, "class", h2_class_value);
			}

			if (dirty & /*questions*/ 4) {
				each_value = /*questions*/ ctx[2];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(select, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (!current || dirty & /*$theme*/ 1 && select_class_value !== (select_class_value = `cstm_form-select form-select bg-transparent ${/*$theme*/ ctx[0].textClass} ${/*$theme*/ ctx[0].borderClass}`)) {
				attr(select, "class", select_class_value);
			}

			if (!current || dirty & /*$theme*/ 1 && input_class_value !== (input_class_value = `cstm_form-control form-control bg-transparent ${/*$theme*/ ctx[0].textClass} ${/*$theme*/ ctx[0].borderClass}`)) {
				attr(input, "class", input_class_value);
			}

			if (!current || dirty & /*$theme*/ 1 && div2_class_value !== (div2_class_value = `cstm_form-floating form-floating pb-5 mb-5 border-bottom pb-3 ${/*$theme*/ ctx[0].mode === 'dark'
			? 'border-white'
			: 'border-secondary'}`)) {
				attr(div2, "class", div2_class_value);
			}
		},
		i(local) {
			if (current) return;
			transition_in(lockicon.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(lockicon.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(hr);
			if (detaching) detach(t0);
			if (detaching) detach(div0);
			destroy_component(lockicon);
			if (detaching) detach(t1);
			if (detaching) detach(h2);
			if (detaching) detach(t3);
			if (detaching) detach(div1);
			destroy_each(each_blocks, detaching);
			if (detaching) detach(t7);
			if (detaching) detach(div2);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $theme;
	component_subscribe($$self, theme, $$value => $$invalidate(0, $theme = $$value));
	let { callback } = $$props;
	let { inputName = '' } = $$props;

	/** *************************************************************************
 * SDK INTEGRATION POINT
 * Summary: SDK callback methods for getting values
 * --------------------------------------------------------------------------
 * Details: Each callback is wrapped by the SDK to provide helper methods
 * for accessing values from the callbacks received from AM
 ************************************************************************* */
	const prompt = callback.getPrompt();

	const questions = callback.getPredefinedQuestions();
	const inputNameQuestion = inputName;
	const inputArr = callback?.payload?.input;
	const inputNameAnswer = Array.isArray(inputArr) && inputArr[1].name;

	/**
 * @function setAnswer - Sets the value on the callback on element blur (lose focus)
 * @param {Object} event
 */
	function setAnswer(event) {
		/** ***********************************************************************
 * SDK INTEGRATION POINT
 * Summary: SDK callback methods for setting values
 * ------------------------------------------------------------------------
 * Details: Each callback is wrapped by the SDK to provide helper methods
 * for writing values to the callbacks received from AM
 *********************************************************************** */
		callback.setAnswer(event.target.value);
	}

	/**
 * @function setQuestion - Sets the value on the callback on element blur (lose focus)
 * @param {Object} event
 */
	function setQuestion(event) {
		/** ***********************************************************************
 * SDK INTEGRATION POINT
 * Summary: SDK callback methods for setting values
 * ------------------------------------------------------------------------
 * Details: Each callback is wrapped by the SDK to provide helper methods
 * for writing values to the callbacks received from AM
 *********************************************************************** */
		callback.setQuestion(event.target.value);
	}

	$$self.$$set = $$props => {
		if ('callback' in $$props) $$invalidate(7, callback = $$props.callback);
		if ('inputName' in $$props) $$invalidate(8, inputName = $$props.inputName);
	};

	return [
		$theme,
		prompt,
		questions,
		inputNameQuestion,
		inputNameAnswer,
		setAnswer,
		setQuestion,
		callback,
		inputName
	];
}

class Kba extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { callback: 7, inputName: 8 });
	}
}

export { Kba as default };
