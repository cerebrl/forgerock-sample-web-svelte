import { SvelteComponent, init, safe_not_equal, empty, insert, group_outros, transition_out, check_outros, transition_in, detach, element, text, attr, append, set_data, noop, create_component, space, mount_component, destroy_component } from 'svelte/internal';
import Alert_icon from '../icons/alert-icon.svelte.js';
import Verified_icon from '../icons/verified-icon.svelte.js';

/* src/lib/components/journey/alert.svelte generated by Svelte v3.47.0 */

function create_else_block(ctx) {
	let p;
	let span;
	let t;

	return {
		c() {
			p = element("p");
			span = element("span");
			t = text(/*message*/ ctx[0]);
			attr(span, "class", "ps-2");
			attr(p, "class", "alert d-flex align-items-center mt-5");
			attr(p, "role", "alert");
		},
		m(target, anchor) {
			insert(target, p, anchor);
			append(p, span);
			append(span, t);
		},
		p(ctx, dirty) {
			if (dirty & /*message*/ 1) set_data(t, /*message*/ ctx[0]);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(p);
		}
	};
}

// (12:29) 
function create_if_block_1(ctx) {
	let p;
	let verifiedicon;
	let t0;
	let span;
	let t1;
	let current;

	verifiedicon = new Verified_icon({
			props: {
				classes: "cstm_verified-alert-icon",
				size: "36px"
			}
		});

	return {
		c() {
			p = element("p");
			create_component(verifiedicon.$$.fragment);
			t0 = space();
			span = element("span");
			t1 = text(/*message*/ ctx[0]);
			attr(span, "class", "ps-2");
			attr(p, "class", "alert alert-success d-flex align-items-center mt-5");
			attr(p, "role", "alert");
		},
		m(target, anchor) {
			insert(target, p, anchor);
			mount_component(verifiedicon, p, null);
			append(p, t0);
			append(p, span);
			append(span, t1);
			current = true;
		},
		p(ctx, dirty) {
			if (!current || dirty & /*message*/ 1) set_data(t1, /*message*/ ctx[0]);
		},
		i(local) {
			if (current) return;
			transition_in(verifiedicon.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(verifiedicon.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(p);
			destroy_component(verifiedicon);
		}
	};
}

// (7:0) {#if type === 'error'}
function create_if_block(ctx) {
	let p;
	let alerticon;
	let t0;
	let span;
	let t1;
	let current;

	alerticon = new Alert_icon({
			props: { classes: "cstm_alert-icon col-1" }
		});

	return {
		c() {
			p = element("p");
			create_component(alerticon.$$.fragment);
			t0 = space();
			span = element("span");
			t1 = text(/*message*/ ctx[0]);
			attr(span, "class", "ps-2");
			attr(p, "class", "alert alert-danger d-flex align-items-center mt-1");
			attr(p, "role", "alert");
		},
		m(target, anchor) {
			insert(target, p, anchor);
			mount_component(alerticon, p, null);
			append(p, t0);
			append(p, span);
			append(span, t1);
			current = true;
		},
		p(ctx, dirty) {
			if (!current || dirty & /*message*/ 1) set_data(t1, /*message*/ ctx[0]);
		},
		i(local) {
			if (current) return;
			transition_in(alerticon.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(alerticon.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(p);
			destroy_component(alerticon);
		}
	};
}

function create_fragment(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block, create_if_block_1, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*type*/ ctx[1] === 'error') return 0;
		if (/*type*/ ctx[1] === 'success') return 1;
		return 2;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { message } = $$props;
	let { type } = $$props;

	$$self.$$set = $$props => {
		if ('message' in $$props) $$invalidate(0, message = $$props.message);
		if ('type' in $$props) $$invalidate(1, type = $$props.type);
	};

	return [message, type];
}

class Alert extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { message: 0, type: 1 });
	}
}

export { Alert as default };
