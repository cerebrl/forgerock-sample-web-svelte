import { SvelteComponent, init, safe_not_equal, element, create_component, space, text, attr, insert, mount_component, append, set_data, transition_in, transition_out, detach, destroy_component, group_outros, check_outros, component_subscribe } from 'svelte/internal';
import { theme, isAuthenticated, username } from '../global-state.js';
import Verified_icon from '../components/icons/verified-icon.svelte.js';

/* src/lib/views/home.svelte generated by Svelte v3.47.0 */

function create_if_block_1(ctx) {
	let p;
	let verifiedicon;
	let t0;
	let span;
	let t1;
	let t2;
	let t3;
	let t4_value = ' ' + "";
	let t4;
	let t5;
	let a;
	let t7;
	let current;

	verifiedicon = new Verified_icon({
			props: {
				classes: "cstm_verified-alert-icon",
				size: "36px"
			}
		});

	return {
		c() {
			p = element("p");
			create_component(verifiedicon.$$.fragment);
			t0 = space();
			span = element("span");
			t1 = text("Welcome back, ");
			t2 = text(/*$username*/ ctx[2]);
			t3 = text("!");
			t4 = text(t4_value);
			t5 = space();
			a = element("a");
			a.textContent = "Manage your todos here";
			t7 = text("\n        .");
			attr(a, "class", "cstm_verified-alert-link");
			attr(a, "href", "/todos");
			attr(span, "class", "ps-2");
			attr(p, "class", "alert alert-success d-flex align-items-center mt-5");
			attr(p, "role", "alert");
		},
		m(target, anchor) {
			insert(target, p, anchor);
			mount_component(verifiedicon, p, null);
			append(p, t0);
			append(p, span);
			append(span, t1);
			append(span, t2);
			append(span, t3);
			append(span, t4);
			append(span, t5);
			append(span, a);
			append(span, t7);
			current = true;
		},
		p(ctx, dirty) {
			if (!current || dirty & /*$username*/ 4) set_data(t2, /*$username*/ ctx[2]);
		},
		i(local) {
			if (current) return;
			transition_in(verifiedicon.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(verifiedicon.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(p);
			destroy_component(verifiedicon);
		}
	};
}

// (56:1) {#if !$isAuthenticated}
function create_if_block(ctx) {
	let h2;
	let t0;
	let h2_class_value;
	let t1;
	let p;
	let t2;
	let a0;
	let t4;
	let t5_value = ' ' + "";
	let t5;
	let t6;
	let a1;
	let t8;

	return {
		c() {
			h2 = element("h2");
			t0 = text("Getting started");
			t1 = space();
			p = element("p");
			t2 = text("To use this app, ");
			a0 = element("a");
			a0.textContent = "create an account now";
			t4 = text("! Already have an account?");
			t5 = text(t5_value);
			t6 = space();
			a1 = element("a");
			a1.textContent = "Sign in";
			t8 = text(" to get things done!");
			attr(h2, "class", h2_class_value = `fs-4 fw-normal pt-3 pb-1 ${/*$theme*/ ctx[0].textClass}`);
			attr(a0, "href", "/register");
			attr(a1, "href", "/login");
		},
		m(target, anchor) {
			insert(target, h2, anchor);
			append(h2, t0);
			insert(target, t1, anchor);
			insert(target, p, anchor);
			append(p, t2);
			append(p, a0);
			append(p, t4);
			append(p, t5);
			append(p, t6);
			append(p, a1);
			append(p, t8);
		},
		p(ctx, dirty) {
			if (dirty & /*$theme*/ 1 && h2_class_value !== (h2_class_value = `fs-4 fw-normal pt-3 pb-1 ${/*$theme*/ ctx[0].textClass}`)) {
				attr(h2, "class", h2_class_value);
			}
		},
		d(detaching) {
			if (detaching) detach(h2);
			if (detaching) detach(t1);
			if (detaching) detach(p);
		}
	};
}

function create_fragment(ctx) {
	let div;
	let t0;
	let h1;
	let t1;
	let h1_class_value;
	let t2;
	let p0;
	let t3;
	let t4_value = ' ' + "";
	let t4;
	let t5;
	let a0;
	let t6;
	let a0_class_value;
	let t7_value = ' ' + "";
	let t7;
	let t8;
	let t9_value = ' ' + "";
	let t9;
	let t10;
	let a1;
	let t11;
	let a1_class_value;
	let t12;
	let p0_class_value;
	let t13;
	let h2;
	let t14;
	let h2_class_value;
	let t15;
	let p1;
	let t16;
	let t17_value = ' ' + "";
	let t17;
	let t18;
	let a2;
	let t20_value = ' ' + "";
	let t20;
	let t21;
	let t22_value = ' ' + "";
	let t22;
	let t23;
	let a3;
	let t25;
	let div_class_value;
	let current;
	let if_block0 = /*$isAuthenticated*/ ctx[1] && create_if_block_1(ctx);
	let if_block1 = !/*$isAuthenticated*/ ctx[1] && create_if_block(ctx);

	return {
		c() {
			div = element("div");
			if (if_block0) if_block0.c();
			t0 = space();
			h1 = element("h1");
			t1 = text("Protect with ForgeRock; Develop with SvelteKit");
			t2 = space();
			p0 = element("p");
			t3 = text("Learn how to develop ForgeRock protected, web apps with the");
			t4 = text(t4_value);
			t5 = space();
			a0 = element("a");
			t6 = text("SvelteKit\n\t\t");
			t7 = text(t7_value);
			t8 = text("\n\t\tlibrary and our");
			t9 = text(t9_value);
			t10 = space();
			a1 = element("a");
			t11 = text("JavaScript SDK");
			t12 = text("\n\t\t.");
			t13 = space();
			h2 = element("h2");
			t14 = text("About this project");
			t15 = space();
			p1 = element("p");
			t16 = text("The purpose of this sample web app is to demonstrate how the ForgeRock\n\t\tJavaScript SDK is implemented within a fully-functional application\n\t\tusing a popular framework. The source code for");
			t17 = text(t17_value);
			t18 = space();
			a2 = element("a");
			a2.textContent = "this project can be found on Github\n\t\t";
			t20 = text(t20_value);
			t21 = text("\n\t\tand run locally for experimentation. For more on our SDKs,");
			t22 = text(t22_value);
			t23 = space();
			a3 = element("a");
			a3.textContent = "you can find our official SDK documentation here.";
			t25 = space();
			if (if_block1) if_block1.c();
			attr(h1, "class", h1_class_value = `cstm_head-text text-center ${/*$theme*/ ctx[0].textClass}`);
			attr(a0, "class", a0_class_value = `${/*$theme*/ ctx[0].textMutedClass}`);
			attr(a0, "href", "https://kit.svelte.dev/");
			attr(a1, "class", a1_class_value = `${/*$theme*/ ctx[0].textMutedClass}`);
			attr(a1, "href", "https://github.com/ForgeRock/forgerock-javascript-sdk");
			attr(p0, "class", p0_class_value = `cstm_subhead-text fs-3 mb-4 fw-bold ${/*$theme*/ ctx[0].textMutedClass}`);
			attr(h2, "class", h2_class_value = `fs-4 fw-normal pt-3 pb-1 ${/*$theme*/ ctx[0].textClass}`);
			attr(a2, "href", "https://github.com/cerebrl/forgerock-sample-web-react");
			attr(a3, "href", "https://sdks.forgerock.com/");
			attr(div, "class", div_class_value = `cstm_container container-fluid ${/*$theme*/ ctx[0].textClass}`);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			if (if_block0) if_block0.m(div, null);
			append(div, t0);
			append(div, h1);
			append(h1, t1);
			append(div, t2);
			append(div, p0);
			append(p0, t3);
			append(p0, t4);
			append(p0, t5);
			append(p0, a0);
			append(a0, t6);
			append(p0, t7);
			append(p0, t8);
			append(p0, t9);
			append(p0, t10);
			append(p0, a1);
			append(a1, t11);
			append(p0, t12);
			append(div, t13);
			append(div, h2);
			append(h2, t14);
			append(div, t15);
			append(div, p1);
			append(p1, t16);
			append(p1, t17);
			append(p1, t18);
			append(p1, a2);
			append(p1, t20);
			append(p1, t21);
			append(p1, t22);
			append(p1, t23);
			append(p1, a3);
			append(div, t25);
			if (if_block1) if_block1.m(div, null);
			current = true;
		},
		p(ctx, [dirty]) {
			if (/*$isAuthenticated*/ ctx[1]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty & /*$isAuthenticated*/ 2) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_1(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(div, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (!current || dirty & /*$theme*/ 1 && h1_class_value !== (h1_class_value = `cstm_head-text text-center ${/*$theme*/ ctx[0].textClass}`)) {
				attr(h1, "class", h1_class_value);
			}

			if (!current || dirty & /*$theme*/ 1 && a0_class_value !== (a0_class_value = `${/*$theme*/ ctx[0].textMutedClass}`)) {
				attr(a0, "class", a0_class_value);
			}

			if (!current || dirty & /*$theme*/ 1 && a1_class_value !== (a1_class_value = `${/*$theme*/ ctx[0].textMutedClass}`)) {
				attr(a1, "class", a1_class_value);
			}

			if (!current || dirty & /*$theme*/ 1 && p0_class_value !== (p0_class_value = `cstm_subhead-text fs-3 mb-4 fw-bold ${/*$theme*/ ctx[0].textMutedClass}`)) {
				attr(p0, "class", p0_class_value);
			}

			if (!current || dirty & /*$theme*/ 1 && h2_class_value !== (h2_class_value = `fs-4 fw-normal pt-3 pb-1 ${/*$theme*/ ctx[0].textClass}`)) {
				attr(h2, "class", h2_class_value);
			}

			if (!/*$isAuthenticated*/ ctx[1]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block(ctx);
					if_block1.c();
					if_block1.m(div, null);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (!current || dirty & /*$theme*/ 1 && div_class_value !== (div_class_value = `cstm_container container-fluid ${/*$theme*/ ctx[0].textClass}`)) {
				attr(div, "class", div_class_value);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $theme;
	let $isAuthenticated;
	let $username;
	component_subscribe($$self, theme, $$value => $$invalidate(0, $theme = $$value));
	component_subscribe($$self, isAuthenticated, $$value => $$invalidate(1, $isAuthenticated = $$value));
	component_subscribe($$self, username, $$value => $$invalidate(2, $username = $$value));
	return [$theme, $isAuthenticated, $username];
}

class Home extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export { Home as default };
