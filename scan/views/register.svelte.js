import { SvelteComponent, init, safe_not_equal, element, create_component, space, attr, insert, append, mount_component, transition_in, transition_out, detach, destroy_component, component_subscribe, text } from 'svelte/internal';
import Back_home from '../components/utilities/back-home.svelte.js';
import Card from '../components/utilities/card.svelte.js';
import Form from '../components/journey/form.svelte.js';
import { theme } from '../global-state.js';
import New_user_icon from '../components/icons/new-user-icon.svelte.js';

/* src/lib/views/register.svelte generated by Svelte v3.47.0 */

function create_topMessage_slot(ctx) {
	let p;
	let t0;
	let a;
	let p_class_value;

	return {
		c() {
			p = element("p");
			t0 = text("Already have an account? ");
			a = element("a");
			a.textContent = "Sign in here!";
			attr(a, "href", "/login");
			attr(p, "slot", "topMessage");
			attr(p, "class", p_class_value = `text-center text-secondary pb-2 ${/*$theme*/ ctx[0].textClass}`);
		},
		m(target, anchor) {
			insert(target, p, anchor);
			append(p, t0);
			append(p, a);
		},
		p(ctx, dirty) {
			if (dirty & /*$theme*/ 1 && p_class_value !== (p_class_value = `text-center text-secondary pb-2 ${/*$theme*/ ctx[0].textClass}`)) {
				attr(p, "class", p_class_value);
			}
		},
		d(detaching) {
			if (detaching) detach(p);
		}
	};
}

// (11:4) <Card>
function create_default_slot(ctx) {
	let div;
	let newusericon;
	let t;
	let form;
	let current;
	newusericon = new New_user_icon({ props: { size: "72px" } });

	form = new Form({
			props: {
				action: { type: 'register' },
				$$slots: { topMessage: [create_topMessage_slot] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			div = element("div");
			create_component(newusericon.$$.fragment);
			t = space();
			create_component(form.$$.fragment);
			attr(div, "class", "cstm_form-icon align-self-center mb-3");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component(newusericon, div, null);
			insert(target, t, anchor);
			mount_component(form, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const form_changes = {};

			if (dirty & /*$$scope, $theme*/ 3) {
				form_changes.$$scope = { dirty, ctx };
			}

			form.$set(form_changes);
		},
		i(local) {
			if (current) return;
			transition_in(newusericon.$$.fragment, local);
			transition_in(form.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(newusericon.$$.fragment, local);
			transition_out(form.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(newusericon);
			if (detaching) detach(t);
			destroy_component(form, detaching);
		}
	};
}

function create_fragment(ctx) {
	let div1;
	let div0;
	let backhome;
	let t;
	let card;
	let current;
	backhome = new Back_home({});

	card = new Card({
			props: {
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			create_component(backhome.$$.fragment);
			t = space();
			create_component(card.$$.fragment);
			attr(div0, "class", "w-100");
			attr(div1, "class", "cstm_container_v-centered container-fluid d-flex align-items-center");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);
			mount_component(backhome, div0, null);
			append(div0, t);
			mount_component(card, div0, null);
			current = true;
		},
		p(ctx, [dirty]) {
			const card_changes = {};

			if (dirty & /*$$scope, $theme*/ 3) {
				card_changes.$$scope = { dirty, ctx };
			}

			card.$set(card_changes);
		},
		i(local) {
			if (current) return;
			transition_in(backhome.$$.fragment, local);
			transition_in(card.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(backhome.$$.fragment, local);
			transition_out(card.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			destroy_component(backhome);
			destroy_component(card);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $theme;
	component_subscribe($$self, theme, $$value => $$invalidate(0, $theme = $$value));
	return [$theme];
}

class Register extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export { Register as default };
