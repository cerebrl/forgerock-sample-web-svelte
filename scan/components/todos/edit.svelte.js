import { SvelteComponent, init, safe_not_equal, element, text, space, attr, insert, append, listen, prevent_default, noop, detach, run_all, component_subscribe } from 'svelte/internal';
import { theme } from '../../global-state.js';

/* src/lib/components/todos/edit.svelte generated by Svelte v3.47.0 */

function create_fragment(ctx) {
	let div5;
	let div4;
	let div3;
	let div0;
	let h4;
	let t0;
	let h4_class_value;
	let div0_class_value;
	let t1;
	let form;
	let div1;
	let input;
	let input_class_value;
	let input_value_value;
	let t2;
	let label;
	let t4;
	let div2;
	let button0;
	let t6;
	let button1;
	let div2_class_value;
	let div3_class_value;
	let mounted;
	let dispose;

	return {
		c() {
			div5 = element("div");
			div4 = element("div");
			div3 = element("div");
			div0 = element("div");
			h4 = element("h4");
			t0 = text("Edit Todo");
			t1 = space();
			form = element("form");
			div1 = element("div");
			input = element("input");
			t2 = space();
			label = element("label");
			label.textContent = "Update todo text";
			t4 = space();
			div2 = element("div");
			button0 = element("button");
			button0.textContent = "Close";
			t6 = space();
			button1 = element("button");
			button1.textContent = "Update Todo";
			attr(h4, "class", h4_class_value = `modal-title ${/*$theme*/ ctx[1].textClass}`);
			attr(div0, "class", div0_class_value = `modal-header ${/*$theme*/ ctx[1].borderClass}`);
			attr(input, "id", "editTodo");
			attr(input, "type", "text");
			attr(input, "class", input_class_value = `cstm_form-control form-control bg-transparent ${/*$theme*/ ctx[1].textClass} ${/*$theme*/ ctx[1].borderClass}`);

			input.value = input_value_value = /*selectedEditTodo*/ ctx[0]
			? /*selectedEditTodo*/ ctx[0].title
			: '';

			input.required = true;
			attr(label, "for", "newTodo");
			attr(div1, "class", "cstm_todos-input cstm_form-floating form-floating flex-grow-1");
			attr(form, "class", "modal-body");
			attr(button0, "id", "closeEditModalBtn");
			attr(button0, "type", "button");
			attr(button0, "data-bs-toggle", "modal");
			attr(button0, "data-bs-target", "#editModal");
			attr(button0, "class", "btn btn-secondary");
			attr(button1, "type", "button");
			attr(button1, "data-bs-toggle", "modal");
			attr(button1, "data-bs-target", "#editModal");
			attr(button1, "class", "btn btn-primary");
			attr(div2, "class", div2_class_value = `modal-footer ${/*$theme*/ ctx[1].borderClass}`);
			attr(div3, "class", div3_class_value = `modal-content  ${/*$theme*/ ctx[1].cardBgClass} ${/*$theme*/ ctx[1].textClass} ${/*$theme*/ ctx[1].borderClass}`);
			attr(div4, "class", `modal-dialog`);
			attr(div5, "class", `modal fade`);
			attr(div5, "data-bs-backdrop", "static");
			attr(div5, "id", "editModal");
			attr(div5, "tabindex", "-1");
			attr(div5, "aria-modal", "true");
			attr(div5, "role", "dialog");
		},
		m(target, anchor) {
			insert(target, div5, anchor);
			append(div5, div4);
			append(div4, div3);
			append(div3, div0);
			append(div0, h4);
			append(h4, t0);
			append(div3, t1);
			append(div3, form);
			append(form, div1);
			append(div1, input);
			append(div1, t2);
			append(div1, label);
			append(div3, t4);
			append(div3, div2);
			append(div2, button0);
			append(div2, t6);
			append(div2, button1);

			if (!mounted) {
				dispose = [
					listen(input, "change", /*updateTitle*/ ctx[2]),
					listen(form, "submit", prevent_default(/*submit_handler*/ ctx[6])),
					listen(button1, "click", /*click_handler*/ ctx[7])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*$theme*/ 2 && h4_class_value !== (h4_class_value = `modal-title ${/*$theme*/ ctx[1].textClass}`)) {
				attr(h4, "class", h4_class_value);
			}

			if (dirty & /*$theme*/ 2 && div0_class_value !== (div0_class_value = `modal-header ${/*$theme*/ ctx[1].borderClass}`)) {
				attr(div0, "class", div0_class_value);
			}

			if (dirty & /*$theme*/ 2 && input_class_value !== (input_class_value = `cstm_form-control form-control bg-transparent ${/*$theme*/ ctx[1].textClass} ${/*$theme*/ ctx[1].borderClass}`)) {
				attr(input, "class", input_class_value);
			}

			if (dirty & /*selectedEditTodo*/ 1 && input_value_value !== (input_value_value = /*selectedEditTodo*/ ctx[0]
			? /*selectedEditTodo*/ ctx[0].title
			: '') && input.value !== input_value_value) {
				input.value = input_value_value;
			}

			if (dirty & /*$theme*/ 2 && div2_class_value !== (div2_class_value = `modal-footer ${/*$theme*/ ctx[1].borderClass}`)) {
				attr(div2, "class", div2_class_value);
			}

			if (dirty & /*$theme*/ 2 && div3_class_value !== (div3_class_value = `modal-content  ${/*$theme*/ ctx[1].cardBgClass} ${/*$theme*/ ctx[1].textClass} ${/*$theme*/ ctx[1].borderClass}`)) {
				attr(div3, "class", div3_class_value);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div5);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $theme;
	component_subscribe($$self, theme, $$value => $$invalidate(1, $theme = $$value));
	let { editTodo } = $$props;
	let { setSelectedEditTodo } = $$props;
	let { selectedEditTodo } = $$props;

	function updateTitle(event) {
		setSelectedEditTodo({
			...selectedEditTodo,
			title: event.target.value
		});
	}

	function submit(event, type) {
		event.preventDefault();
		editTodo(selectedEditTodo);

		// TODO: Improve modal handling
		if (type === 'form') {
			document.getElementById('closeEditModalBtn')?.click();
		}
	}

	const submit_handler = e => submit(e, 'form');
	const click_handler = e => submit(e, 'update-button');

	$$self.$$set = $$props => {
		if ('editTodo' in $$props) $$invalidate(4, editTodo = $$props.editTodo);
		if ('setSelectedEditTodo' in $$props) $$invalidate(5, setSelectedEditTodo = $$props.setSelectedEditTodo);
		if ('selectedEditTodo' in $$props) $$invalidate(0, selectedEditTodo = $$props.selectedEditTodo);
	};

	return [
		selectedEditTodo,
		$theme,
		updateTitle,
		submit,
		editTodo,
		setSelectedEditTodo,
		submit_handler,
		click_handler
	];
}

class Edit extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			editTodo: 4,
			setSelectedEditTodo: 5,
			selectedEditTodo: 0
		});
	}
}

export { Edit as default };
