import { SvelteComponent, init, safe_not_equal, element, space, create_component, text, attr, insert, append, mount_component, listen, set_data, transition_in, transition_out, detach, destroy_component, run_all, component_subscribe } from 'svelte/internal';
import { theme } from '../../global-state.js';
import Todo_icon from '../icons/todo-icon.svelte.js';
import Action_icon from '../icons/action-icon.svelte.js';

/* src/lib/components/todos/todo.svelte generated by Svelte v3.47.0 */

function create_fragment(ctx) {
	let li2;
	let div0;
	let input;
	let input_id_value;
	let input_checked_value;
	let t0;
	let label;
	let todoicon;
	let t1;
	let t2_value = /*todo*/ ctx[3].title + "";
	let t2;
	let label_for_value;
	let t3;
	let div1;
	let button0;
	let actionicon;
	let button0_id_value;
	let t4;
	let ul;
	let li0;
	let button1;
	let t6;
	let li1;
	let button2;
	let ul_class_value;
	let ul_aria_labelledby_value;
	let li2_class_value;
	let current;
	let mounted;
	let dispose;

	todoicon = new Todo_icon({
			props: {
				classes: "me-2",
				completed: /*todo*/ ctx[3].completed,
				size: "36px"
			}
		});

	actionicon = new Action_icon({});

	return {
		c() {
			li2 = element("li");
			div0 = element("div");
			input = element("input");
			t0 = space();
			label = element("label");
			create_component(todoicon.$$.fragment);
			t1 = space();
			t2 = text(t2_value);
			t3 = space();
			div1 = element("div");
			button0 = element("button");
			create_component(actionicon.$$.fragment);
			t4 = space();
			ul = element("ul");
			li0 = element("li");
			button1 = element("button");
			button1.textContent = "Edit";
			t6 = space();
			li1 = element("li");
			button2 = element("button");
			button2.textContent = "Delete";
			attr(input, "id", input_id_value = /*todo*/ ctx[3]._id);
			attr(input, "class", "cstm_form-check form-check-input visually-hidden");
			attr(input, "type", "checkbox");
			input.checked = input_checked_value = /*todo*/ ctx[3].completed;
			attr(label, "for", label_for_value = /*todo*/ ctx[3]._id);
			attr(label, "class", /*todoClasses*/ ctx[4]);
			attr(div0, "class", "flex-grow-1");
			attr(button0, "class", "cstm_dropdown-actions btn h-auto");
			attr(button0, "data-bs-toggle", "dropdown");
			attr(button0, "id", button0_id_value = `todo_action_${/*todo*/ ctx[3]._id}`);
			attr(button1, "class", "dropdown-item");
			attr(button1, "data-bs-toggle", "modal");
			attr(button1, "data-bs-target", "#editModal");
			attr(button2, "class", "dropdown-item");
			attr(button2, "data-bs-toggle", "modal");
			attr(button2, "data-bs-target", "#deleteModal");
			attr(ul, "class", ul_class_value = `dropdown-menu dropdown-menu-end shadow-sm ${/*$theme*/ ctx[5].dropdownClass}`);
			attr(ul, "aria-labelledby", ul_aria_labelledby_value = `todo_action_${/*todo*/ ctx[3]._id}`);
			attr(div1, "class", "dropdown text-end d-flex align-items-center");
			attr(div1, "aria-expanded", "false");
			attr(li2, "class", li2_class_value = `cstm_todo-item list-group-item list-group-item-action d-flex p-0 ${/*$theme*/ ctx[5].textClass}`);
		},
		m(target, anchor) {
			insert(target, li2, anchor);
			append(li2, div0);
			append(div0, input);
			append(div0, t0);
			append(div0, label);
			mount_component(todoicon, label, null);
			append(label, t1);
			append(label, t2);
			append(li2, t3);
			append(li2, div1);
			append(div1, button0);
			mount_component(actionicon, button0, null);
			append(div1, t4);
			append(div1, ul);
			append(ul, li0);
			append(li0, button1);
			append(ul, t6);
			append(ul, li1);
			append(li1, button2);
			current = true;

			if (!mounted) {
				dispose = [
					listen(input, "change", /*change_handler*/ ctx[6]),
					listen(button1, "click", /*click_handler*/ ctx[7]),
					listen(button2, "click", /*click_handler_1*/ ctx[8])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (!current || dirty & /*todo*/ 8 && input_id_value !== (input_id_value = /*todo*/ ctx[3]._id)) {
				attr(input, "id", input_id_value);
			}

			if (!current || dirty & /*todo*/ 8 && input_checked_value !== (input_checked_value = /*todo*/ ctx[3].completed)) {
				input.checked = input_checked_value;
			}

			const todoicon_changes = {};
			if (dirty & /*todo*/ 8) todoicon_changes.completed = /*todo*/ ctx[3].completed;
			todoicon.$set(todoicon_changes);
			if ((!current || dirty & /*todo*/ 8) && t2_value !== (t2_value = /*todo*/ ctx[3].title + "")) set_data(t2, t2_value);

			if (!current || dirty & /*todo*/ 8 && label_for_value !== (label_for_value = /*todo*/ ctx[3]._id)) {
				attr(label, "for", label_for_value);
			}

			if (!current || dirty & /*todoClasses*/ 16) {
				attr(label, "class", /*todoClasses*/ ctx[4]);
			}

			if (!current || dirty & /*todo*/ 8 && button0_id_value !== (button0_id_value = `todo_action_${/*todo*/ ctx[3]._id}`)) {
				attr(button0, "id", button0_id_value);
			}

			if (!current || dirty & /*$theme*/ 32 && ul_class_value !== (ul_class_value = `dropdown-menu dropdown-menu-end shadow-sm ${/*$theme*/ ctx[5].dropdownClass}`)) {
				attr(ul, "class", ul_class_value);
			}

			if (!current || dirty & /*todo*/ 8 && ul_aria_labelledby_value !== (ul_aria_labelledby_value = `todo_action_${/*todo*/ ctx[3]._id}`)) {
				attr(ul, "aria-labelledby", ul_aria_labelledby_value);
			}

			if (!current || dirty & /*$theme*/ 32 && li2_class_value !== (li2_class_value = `cstm_todo-item list-group-item list-group-item-action d-flex p-0 ${/*$theme*/ ctx[5].textClass}`)) {
				attr(li2, "class", li2_class_value);
			}
		},
		i(local) {
			if (current) return;
			transition_in(todoicon.$$.fragment, local);
			transition_in(actionicon.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(todoicon.$$.fragment, local);
			transition_out(actionicon.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(li2);
			destroy_component(todoicon);
			destroy_component(actionicon);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $theme;
	component_subscribe($$self, theme, $$value => $$invalidate(5, $theme = $$value));
	let { completeTodo } = $$props;
	let { setSelectedDeleteTodo } = $$props;
	let { setSelectedEditTodo } = $$props;
	let { todo } = $$props;
	let todoClasses = '';

	const change_handler = event => {
		completeTodo(todo._id, event.currentTarget.checked);
	};

	const click_handler = () => setSelectedEditTodo(todo);
	const click_handler_1 = () => setSelectedDeleteTodo(todo);

	$$self.$$set = $$props => {
		if ('completeTodo' in $$props) $$invalidate(0, completeTodo = $$props.completeTodo);
		if ('setSelectedDeleteTodo' in $$props) $$invalidate(1, setSelectedDeleteTodo = $$props.setSelectedDeleteTodo);
		if ('setSelectedEditTodo' in $$props) $$invalidate(2, setSelectedEditTodo = $$props.setSelectedEditTodo);
		if ('todo' in $$props) $$invalidate(3, todo = $$props.todo);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*todo*/ 8) {
			{
				$$invalidate(4, todoClasses = `cstm_todo-label ${todo.completed
				? 'cstm_todo-label_complete'
				: 'cstm_todo-label_incomplete'} ${'col d-flex align-items-center fs-5 w-100 p-3'}`);
			}
		}
	};

	return [
		completeTodo,
		setSelectedDeleteTodo,
		setSelectedEditTodo,
		todo,
		todoClasses,
		$theme,
		change_handler,
		click_handler,
		click_handler_1
	];
}

class Todo extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			completeTodo: 0,
			setSelectedDeleteTodo: 1,
			setSelectedEditTodo: 2,
			todo: 3
		});
	}
}

export { Todo as default };
