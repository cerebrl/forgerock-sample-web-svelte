import { SvelteComponent, init, safe_not_equal, element, text, space, create_component, attr, insert, append, mount_component, group_outros, transition_out, check_outros, transition_in, detach, destroy_component, component_subscribe, noop, empty, update_keyed_each, outro_and_destroy_block } from 'svelte/internal';
import { browser } from '$app/env';
import { goto } from '$app/navigation';
import { writable } from 'svelte/store';
import Create from '../components/todos/create.svelte.js';
import Delete from '../components/todos/delete.svelte.js';
import Edit from '../components/todos/edit.svelte.js';
import { isAuthenticated, theme } from '../global-state.js';
import reducer from '../components/todos/reducer.js';
import apiRequest from '../utilities/request.js';
import Todo from '../components/todos/todo.svelte.js';

/* src/lib/views/todos.svelte generated by Svelte v3.47.0 */

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[13] = list[i];
	return child_ctx;
}

// (79:4) {:else}
function create_else_block_1(ctx) {
	let p;
	let span0;
	let t0;
	let span1;
	let p_class_value;

	return {
		c() {
			p = element("p");
			span0 = element("span");
			t0 = space();
			span1 = element("span");
			span1.textContent = "Collecting your todos ...";
			attr(span0, "class", "spinner-border text-primary my-2");
			attr(span0, "role", "status");
			attr(span1, "class", "p-3 fs-5 text-muted");
			attr(p, "class", p_class_value = `d-flex justify-content-center align-items-center border-top px-3 ${/*$theme*/ ctx[2].borderClass}`);
		},
		m(target, anchor) {
			insert(target, p, anchor);
			append(p, span0);
			append(p, t0);
			append(p, span1);
		},
		p(ctx, dirty) {
			if (dirty & /*$theme*/ 4 && p_class_value !== (p_class_value = `d-flex justify-content-center align-items-center border-top px-3 ${/*$theme*/ ctx[2].borderClass}`)) {
				attr(p, "class", p_class_value);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(p);
		}
	};
}

// (58:4) {#if hasFetched}
function create_if_block(ctx) {
	let ul;
	let current_block_type_index;
	let if_block;
	let ul_class_value;
	let current;
	const if_block_creators = [create_if_block_1, create_else_block];
	const if_blocks = [];

	function select_block_type_1(ctx, dirty) {
		if (/*$todos*/ ctx[1].length) return 0;
		return 1;
	}

	current_block_type_index = select_block_type_1(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			ul = element("ul");
			if_block.c();
			attr(ul, "class", ul_class_value = `list-group list-group-flush mb-1 ${/*$theme*/ ctx[2].listGroupClass}`);
		},
		m(target, anchor) {
			insert(target, ul, anchor);
			if_blocks[current_block_type_index].m(ul, null);
			current = true;
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_1(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(ul, null);
			}

			if (!current || dirty & /*$theme*/ 4 && ul_class_value !== (ul_class_value = `list-group list-group-flush mb-1 ${/*$theme*/ ctx[2].listGroupClass}`)) {
				attr(ul, "class", ul_class_value);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(ul);
			if_blocks[current_block_type_index].d();
		}
	};
}

// (69:8) {:else}
function create_else_block(ctx) {
	let li;

	return {
		c() {
			li = element("li");
			li.innerHTML = `<div class="row"><p class="col d-flex align-items-center fs-5 text-muted w-100 ms-3 p-3">No todos yet. Create one above!</p></div>`;
			attr(li, "class", "cstm_todo-item list-group-item list-group-item-action p-0");
		},
		m(target, anchor) {
			insert(target, li, anchor);
		},
		p: noop,
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(li);
		}
	};
}

// (60:8) {#if $todos.length}
function create_if_block_1(ctx) {
	let each_blocks = [];
	let each_1_lookup = new Map();
	let each_1_anchor;
	let current;
	let each_value = /*$todos*/ ctx[1];
	const get_key = ctx => /*todo*/ ctx[13]._id;

	for (let i = 0; i < each_value.length; i += 1) {
		let child_ctx = get_each_context(ctx, each_value, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block(key, child_ctx));
	}

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (dirty & /*completeTodo, $todos, selectedDeleteTodo, selectedEditTodo*/ 354) {
				each_value = /*$todos*/ ctx[1];
				group_outros();
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, each_1_anchor.parentNode, outro_and_destroy_block, create_each_block, each_1_anchor, get_each_context);
				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d(detaching);
			}

			if (detaching) detach(each_1_anchor);
		}
	};
}

// (61:10) {#each $todos as todo (todo._id)}
function create_each_block(key_1, ctx) {
	let first;
	let todo;
	let current;

	todo = new Todo({
			props: {
				completeTodo: /*completeTodo*/ ctx[8],
				todo: /*todo*/ ctx[13],
				setSelectedDeleteTodo: /*selectedDeleteTodo*/ ctx[5].set,
				setSelectedEditTodo: /*selectedEditTodo*/ ctx[6].set
			}
		});

	return {
		key: key_1,
		first: null,
		c() {
			first = empty();
			create_component(todo.$$.fragment);
			this.first = first;
		},
		m(target, anchor) {
			insert(target, first, anchor);
			mount_component(todo, target, anchor);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			const todo_changes = {};
			if (dirty & /*$todos*/ 2) todo_changes.todo = /*todo*/ ctx[13];
			todo.$set(todo_changes);
		},
		i(local) {
			if (current) return;
			transition_in(todo.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(todo.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(first);
			destroy_component(todo, detaching);
		}
	};
}

function create_fragment(ctx) {
	let div1;
	let h1;
	let t0;
	let h1_class_value;
	let t1;
	let p;
	let t3;
	let div0;
	let createtodo;
	let t4;
	let current_block_type_index;
	let if_block;
	let div0_class_value;
	let t5;
	let editmodal;
	let t6;
	let deletemodal;
	let current;
	createtodo = new Create({ props: { addTodo: /*addTodo*/ ctx[7] } });
	const if_block_creators = [create_if_block, create_else_block_1];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*hasFetched*/ ctx[0]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	editmodal = new Edit({
			props: {
				editTodo: /*editTodo*/ ctx[10],
				selectedEditTodo: /*$selectedEditTodo*/ ctx[3],
				setSelectedEditTodo: /*selectedEditTodo*/ ctx[6].set
			}
		});

	deletemodal = new Delete({
			props: { deleteTodo: /*deleteTodo*/ ctx[9] }
		});

	return {
		c() {
			div1 = element("div");
			h1 = element("h1");
			t0 = text("Your Todos");
			t1 = space();
			p = element("p");
			p.textContent = "Create and manage your todos.";
			t3 = space();
			div0 = element("div");
			create_component(createtodo.$$.fragment);
			t4 = space();
			if_block.c();
			t5 = space();
			create_component(editmodal.$$.fragment);
			t6 = space();
			create_component(deletemodal.$$.fragment);
			attr(h1, "class", h1_class_value = `mt-5 ${/*$theme*/ ctx[2].textClass}`);
			attr(p, "class", "fs-6 text-muted");
			attr(div0, "class", div0_class_value = `card shadow-sm mb-5 ${/*$theme*/ ctx[2].cardBgClass}`);
			attr(div1, "class", `cstm_container container-fluid`);
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, h1);
			append(h1, t0);
			append(div1, t1);
			append(div1, p);
			append(div1, t3);
			append(div1, div0);
			mount_component(createtodo, div0, null);
			append(div0, t4);
			if_blocks[current_block_type_index].m(div0, null);
			insert(target, t5, anchor);
			mount_component(editmodal, target, anchor);
			insert(target, t6, anchor);
			mount_component(deletemodal, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			if (!current || dirty & /*$theme*/ 4 && h1_class_value !== (h1_class_value = `mt-5 ${/*$theme*/ ctx[2].textClass}`)) {
				attr(h1, "class", h1_class_value);
			}

			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(div0, null);
			}

			if (!current || dirty & /*$theme*/ 4 && div0_class_value !== (div0_class_value = `card shadow-sm mb-5 ${/*$theme*/ ctx[2].cardBgClass}`)) {
				attr(div0, "class", div0_class_value);
			}

			const editmodal_changes = {};
			if (dirty & /*$selectedEditTodo*/ 8) editmodal_changes.selectedEditTodo = /*$selectedEditTodo*/ ctx[3];
			editmodal.$set(editmodal_changes);
		},
		i(local) {
			if (current) return;
			transition_in(createtodo.$$.fragment, local);
			transition_in(if_block);
			transition_in(editmodal.$$.fragment, local);
			transition_in(deletemodal.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(createtodo.$$.fragment, local);
			transition_out(if_block);
			transition_out(editmodal.$$.fragment, local);
			transition_out(deletemodal.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			destroy_component(createtodo);
			if_blocks[current_block_type_index].d();
			if (detaching) detach(t5);
			destroy_component(editmodal, detaching);
			if (detaching) detach(t6);
			destroy_component(deletemodal, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $todos;
	let $selectedDeleteTodo;
	let $isAuthenticated;
	let $theme;
	let $selectedEditTodo;
	component_subscribe($$self, isAuthenticated, $$value => $$invalidate(11, $isAuthenticated = $$value));
	component_subscribe($$self, theme, $$value => $$invalidate(2, $theme = $$value));
	const todos = writable([]);
	component_subscribe($$self, todos, value => $$invalidate(1, $todos = value));
	const selectedDeleteTodo = writable(null);
	component_subscribe($$self, selectedDeleteTodo, value => $$invalidate(12, $selectedDeleteTodo = value));
	const selectedEditTodo = writable(null);
	component_subscribe($$self, selectedEditTodo, value => $$invalidate(3, $selectedEditTodo = value));
	let hasFetched = false;

	if (browser) {
		(async function fetchTodos() {
			let fetchedTodos = [];

			try {
				fetchedTodos = await apiRequest('todos');
			} catch(err) {
				console.error(`Fetch todo request | ${err}`);
			}

			$$invalidate(0, hasFetched = true);
			todos.set([...$todos, ...fetchedTodos]);
		})();
	}

	function addTodo(newTodo) {
		todos.set(reducer($todos, {
			type: 'add-todo',
			payload: { todo: newTodo }
		}));
	}

	async function completeTodo(_id, completed) {
		todos.set(reducer($todos, {
			type: 'complete-todo',
			payload: { _id, completed }
		}));

		await apiRequest(`todos/${_id}`, 'POST', { completed });
	}

	async function deleteTodo() {
		todos.set(reducer($todos, {
			type: 'delete-todo',
			payload: { _id: $selectedDeleteTodo?._id }
		}));

		await apiRequest(`todos/${$selectedDeleteTodo?._id}`, 'DELETE');
	}

	async function editTodo({ _id, title }) {
		todos.set(reducer($todos, {
			type: 'edit-todo',
			payload: { _id, title }
		}));

		await apiRequest(`todos/${_id}`, 'POST', { title });
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$isAuthenticated*/ 2048) {
			{
				if (browser && !$isAuthenticated) {
					/**
 * If we detect user has lost authentication status, redirect to home
*/
					goto('/');
				}
			}
		}
	};

	return [
		hasFetched,
		$todos,
		$theme,
		$selectedEditTodo,
		todos,
		selectedDeleteTodo,
		selectedEditTodo,
		addTodo,
		completeTodo,
		deleteTodo,
		editTodo,
		$isAuthenticated
	];
}

class Todos extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export { Todos as default };
